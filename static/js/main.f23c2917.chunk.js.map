{"version":3,"sources":["logo.svg","components/HocComponent.jsx","components/home.jsx","components/KingsLanding.jsx","components/KnightsWatch.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","CUL","props","name","map","data","i","react_default","a","createElement","HocComponent_CLI","value","key","CLI","firstname","lastname","age","CINPUT","inputtype","type","id","onChange","eventHandler","onClick","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","userdata","handleChange","bind","assertThisInitialized","handleSubmit","_this2","setState","e","defineProperty","target","console","log","joined","concat","HocComponent_CUL","HocComponent_CINPUT","Component","KingsLanding","KnightsWatch","persons","logo","axios","get","then","res","hdurl","src","className","alt","App","home","react_router_dom","to","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,kRCU3BC,EAAM,SAACC,GAChB,OACIA,EAAMC,KAAKC,IAAI,SAACC,EAAKC,GACjB,OACIC,EAAAC,EAAAC,cAACC,EAAD,CAAKC,MAAON,EAAMO,IAAKN,OAY1BO,EAAM,SAACX,GAChB,OACGK,EAAAC,EAAAC,cAAA,cAAMP,EAAMS,MAAMG,UAAlB,MAAgCZ,EAAMS,MAAMI,SAA5C,MAAyDb,EAAMS,MAAMK,MAI/DC,EAAS,SAACf,GACnB,MACyB,SAApBA,EAAMgB,UACKX,EAAAC,EAAAC,cAAA,SAAOU,KAAMjB,EAAMgB,UAAWE,GAAIlB,EAAMkB,GAAIC,SAAUnB,EAAMoB,eAEpEf,EAAAC,EAAAC,cAAA,SAAOU,KAAMjB,EAAMgB,UAAWE,GAAIlB,EAAMkB,GAAIG,QAASrB,EAAMoB,gBCuBxDE,cAxDb,SAAAA,EAAYtB,GAAO,IAAAuB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAM1B,KACD8B,MAAQ,CACZC,SAAW,GACZnB,UAAY,GACZC,SAAS,GACTC,IAAI,IAGJS,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,CAAAD,IAVHA,oFAaE,IAAAa,EAAAV,KACnBA,KAAKW,SAAS,SAAAP,GAAK,MAAK,CACpBC,SAAUK,EAAKpC,MAAM+B,iDAIbO,GACZZ,KAAKW,SAALb,OAAAe,EAAA,EAAAf,CAAA,GAAiBc,EAAEE,OAAOtB,GAAKoB,EAAEE,OAAO/B,QACxCgC,QAAQC,IAAIhB,KAAKI,4CAINQ,GAGX,IAAIK,EAASjB,KAAKI,MAAMC,SAASa,OAAQ,CACrChC,UAAYc,KAAKI,MAAMlB,UACvBC,SAASa,KAAKI,MAAMjB,SACpBC,IAAIY,KAAKI,MAAMhB,MAGnBY,KAAKW,SAAS,CAAEN,SAAUY,qCAO1B,OACEtC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACsC,EAAD,CAAK5C,KAAMyB,KAAKI,MAAMC,WACtB1B,EAAAC,EAAAC,cAAA,yBACWF,EAAAC,EAAAC,cAACuC,EAAD,CAAQ9B,UAAW,OAAQE,GAAI,YAAaE,aAAcM,KAAKM,eAAiB3B,EAAAC,EAAAC,cAAA,WAD3F,aAEUF,EAAAC,EAAAC,cAACuC,EAAD,CAAQ9B,UAAW,OAAQI,aAAcM,KAAKM,aAAed,GAAI,aAAeb,EAAAC,EAAAC,cAAA,WAF1F,SAGMF,EAAAC,EAAAC,cAACuC,EAAD,CAAQ9B,UAAW,OAAQI,aAAcM,KAAKM,aAAed,GAAI,QAAUb,EAAAC,EAAAC,cAAA,WACjFF,EAAAC,EAAAC,cAACuC,EAAD,CAAQ9B,UAAW,SAAUE,GAAI,eAAgBE,aAAcM,KAAKS,wBAjDzDY,aCUJC,mLARX,OACE3C,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,6CALiBwC,8BC2BZE,6MAxBbnB,MAAQ,CACNoB,QAAS,GACTC,KAAO,uFAIW,IAAAf,EAAAV,KAClB0B,IAAMC,IAAN,wFACGC,KAAK,SAAAC,GACJd,QAAQC,IAAIa,EAAIpD,KAAKqD,OACrBpB,EAAKC,SAAS,CAAEc,KAAOI,EAAIpD,KAAKqD,2CAKpC,OACEnD,EAAAC,EAAAC,cAAA,UAEEF,EAAAC,EAAAC,cAAA,OAAKkD,IAAK/B,KAAKI,MAAMqB,KAAMO,UAAU,WAAWC,IAAI,iBAnBjCZ,4BCKrBhB,EAAW,CACb,CAAEnB,UAAW,SAAUC,SAAU,SAAUC,IAAK,OAChD,CACIF,UAAW,WACXC,SAAU,OACVC,IAAK,QA0BE8C,MAtBf,WACI,OACIvD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,OACXrD,EAAAC,EAAAC,cAAA,UAAQmD,UAAU,cACdrD,EAAAC,EAAAC,cAAA,OAAKkD,IAAKN,IAAMO,UAAU,WAAWC,IAAI,SACzCtD,EAAAC,EAAAC,cAACsD,EAAD,CAAM9B,SAAUA,IAChB1B,EAAAC,EAAAC,cAACuD,EAAA,EAAD,KACIzD,EAAAC,EAAAC,cAAA,OAAKmD,UAAU,SACXrD,EAAAC,EAAAC,cAAA,+BACAF,EAAAC,EAAAC,cAACuD,EAAA,EAAD,CAAMC,GAAG,SAAQ1D,EAAAC,EAAAC,cAAA,iCAGrBF,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC3C,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAOE,KAAK,gBAAgBC,UAAWlB,SCpB3CmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOrE,EAAAC,EAAAC,cAACoE,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.f23c2917.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nexport const CForm = (props) => {\r\n   return (\r\n       <form>\r\n            <h1>User Deatil </h1>\r\n            {props.children}\r\n        </form>     \r\n   )\r\n} \r\n\r\nexport const CUL = (props) => {\r\n    return (\r\n        props.name.map((data,i) => {\r\n            return (\r\n                <CLI value={data} key={i} />\r\n            )\r\n        })\r\n    )\r\n } \r\n\r\n//  export const CLI = (props) => {\r\n//     return (\r\n//         <li>{{props.value}} </li>\r\n//     )\r\n//  } \r\n\r\nexport const CLI = (props) => {\r\n    return (\r\n       <li> {props.value.firstname} - {props.value.lastname} - {props.value.age}</li>        \r\n    )\r\n};\r\n\r\nexport const CINPUT = (props) => {\r\n    return (\r\n        (props.inputtype === 'text') ?\r\n                    <input type={props.inputtype} id={props.id} onChange={props.eventHandler} /> :\r\n        \r\n            <input type={props.inputtype} id={props.id} onClick={props.eventHandler} />\r\n        \r\n    )\r\n};\r\n\r\n","import React, { Component } from \"react\";\r\nimport { CForm, CUL, CLI, CINPUT } from \"./HocComponent\";\r\n\r\nclass Home extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n     userdata : [],\r\n    firstname : '',\r\n    lastname:'',\r\n    age:''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }  \r\n\r\n  componentWillMount() {\r\n    this.setState(state => ({\r\n        userdata: this.props.userdata\r\n      }));\r\n  }\r\n\r\n   handleChange(e) {      \r\n    this.setState({ [e.target.id]: e.target.value });\r\n    console.log(this.state);\r\n  }\r\n\r\n\r\n  handleSubmit(e) {   \r\n\r\n\r\n    var joined = this.state.userdata.concat( {\r\n        firstname : this.state.firstname,\r\n        lastname:this.state.lastname,\r\n        age:this.state.age\r\n    });\r\n\r\n    this.setState({ userdata: joined })\r\n\r\n\r\n\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <CUL name={this.state.userdata} />        \r\n        <div>\r\n        First Name:<CINPUT inputtype={'text'} id={'firstname'} eventHandler={this.handleChange}  /><br />\r\n        Last Name:<CINPUT inputtype={'text'} eventHandler={this.handleChange}  id={'lastname'}  /><br /> \r\n        Age : <CINPUT inputtype={'text'} eventHandler={this.handleChange}  id={'age'}  /><br />\r\n        <CINPUT inputtype={'submit'} id={'submitButton'} eventHandler={this.handleSubmit}  />\r\n        </div> \r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Home;\r\n","import React, { Component } from \"react\";\r\n\r\nclass KingsLanding extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n          <h1> This is Kings landing </h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default KingsLanding;\r\n","import React, { Component } from \"react\";\r\nimport axios from 'axios';\r\n\r\n\r\nclass KnightsWatch extends Component {\r\n  state = {\r\n    persons: [],\r\n    logo : ''\r\n  }\r\n\r\n\r\n  componentDidMount() {\r\n    axios.get(`https://api.nasa.gov/planetary/apod?api_key=NNKOjkoul8n1CH18TWA9gwngW1s1SmjESPjNoUFo`)\r\n      .then(res => {           \r\n        console.log(res.data.hdurl);\r\n        this.setState({ logo : res.data.hdurl });\r\n      })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <ul>\r\n        {/* { this.state.persons.map(person => <li>{person.name}</li>)} */}\r\n        <img src={this.state.logo} className=\"App-logo\" alt=\"logo\" />\r\n\r\n      </ul>\r\n    )\r\n  }\r\n}\r\nexport default KnightsWatch;\r\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Home from \"./components/home\";\nimport KingsLanding from \"./components/KingsLanding\";\nimport KnightsWatch from \"./components/KnightsWatch\";\n\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom';\n\nconst userdata = [\n    { firstname: \"Yogesh\", lastname: \"Mishra\", age: \"200\" },\n    {\n        firstname: \"Shainkey\",\n        lastname: \"jain\",\n        age: \"180\"\n    }\n];\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                <Home userdata={userdata} />\n                <Router>\n                    <div className=\"title\">\n                        <h1>React Router demo</h1>\n                        <Link to=\"/list\"><button>Show the List</button></Link>\n                    </div>\n\n                    <div>\n                        <Route exact path=\"/\" component={KingsLanding} />\n                        <Route path=\"/knightswatch\" component={KnightsWatch} />\n                    </div>\n                </Router>\n            </header>\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}